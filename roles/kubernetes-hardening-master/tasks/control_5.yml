- name: 5.1.1 Ensure that the cluster-admin role is only used where required (Not Scored)
  debug: msg="Review each principal listed and ensure that cluster-admin privilege is required for it."

- shell: "kubectl get clusterrolebindings -o=custom-columns=NAME:.metadata.name,ROLE:.roleRef.name,SUBJECT:.subjects[*].name"
  register: output_5_1_1

- name: Display - 5.1.1 Ensure that the cluster-admin role is only used where required (Not Scored)
  debug: var=output_5_1_1.stdout_lines

- name: 5.1.2 Minimize access to secrets (Not Scored) - Role
  debug: msg="Where possible, remove get, list and watch access to secret objects in the cluster."

- shell: "kubectl get roles --all-namespaces -o=custom-columns=NAME:.metadata.name,RESOURCES:.rules[].resources,VERBS:.rules[].verbs"
  register: output_5_1_2_role

- debug: msg="No role has an access to secrets"
  when: not(output_5_1_2_role.stdout.find('secrets') != -1)

- shell: "kubectl get roles --all-namespaces -o=custom-columns=NAME:.metadata.name,RESOURCES:.rules[].resources,VERBS:.rules[].verbs | grep secrets"
  register: output_5_1_2_role_with_output
  when: output_5_1_2_role.stdout.find('secrets') != -1

- name: 5.1.2 Minimize access to secrets (Not Scored) - Role
  debug: var=output_5_1_2_role_with_output.stdout_lines
  when: output_5_1_2_role.stdout.find('secrets') != -1

- name: 5.1.2 Minimize access to secrets (Not Scored) - ClusterRole
  debug: msg="Where possible, remove get, list and watch access to secret objects in the cluster."

- shell: "kubectl get clusterroles --all-namespaces -o=custom-columns=NAME:.metadata.name,RESOURCES:.rules[].resources,VERBS:.rules[].verbs"
  register: output_5_1_2_clusterrole

- debug: msg="No clusterrole has an access to secrets"
  when: not(output_5_1_2_clusterrole.stdout.find('secrets') != -1)

- shell: "kubectl get clusterroles --all-namespaces -o=custom-columns=NAME:.metadata.name,RESOURCES:.rules[].resources,VERBS:.rules[].verbs | grep secrets"
  register: output_5_1_2_clusterrole_with_output
  when: output_5_1_2_clusterrole.stdout.find('secrets') != -1

- name: 5.1.2 Minimize access to secrets (Not Scored) - ClusterRole
  debug: var=output_5_1_2_clusterrole_with_output.stdout_lines
  when: output_5_1_2_clusterrole.stdout.find('secrets') != -1

- name: 5.1.3 Minimize wildcard use in Roles and ClusterRoles (Not Scored) - Role
  debug: msg="Where possible replace any use of wildcards in clusterroles and roles with specific objects or actions."

- shell: "kubectl get roles --all-namespaces -o=custom-columns=NAME:.metadata.name,RESOURCES:.rules[].resources,VERBS:.rules[].verbs"
  register: output_5_1_3_role

- debug: msg="No role has wildcard"
  when: not(output_5_1_3_role.stdout.find('*') != -1)

- name: 5.1.3 Minimize wildcard use in Roles and ClusterRoles (Not Scored) - Role
  shell: "kubectl get roles --all-namespaces -o=custom-columns=NAME:.metadata.name,RESOURCES:.rules[].resources,VERBS:.rules[].verbs | grep '*'"
  register: output_5_1_3_role_with_output
  when: output_5_1_3_role.stdout.find('*') != -1

- debug: var=output_5_1_3_role_with_output.stdout_lines
  when: output_5_1_3_role.stdout.find('*') != -1

- name: 5.1.3 Minimize wildcard use in Roles and ClusterRoles (Not Scored) - ClusterRole
  debug: msg="Where possible replace any use of wildcards in clusterroles and roles with specific objects or actions."

- shell: "kubectl get clusterroles --all-namespaces -o=custom-columns=NAME:.metadata.name,RESOURCES:.rules[].resources,VERBS:.rules[].verbs"
  register: output_5_1_3_clusterrole

- debug: msg="No clusterrole has wildcard"
  when: not(output_5_1_3_clusterrole.stdout.find('*') != -1)

- shell: "kubectl get clusterroles --all-namespaces -o=custom-columns=NAME:.metadata.name,RESOURCES:.rules[].resources,VERBS:.rules[].verbs | grep '*'"
  register: output_5_1_3_clusterrole_with_output
  when: output_5_1_3_clusterrole.stdout.find('*') != -1

- debug: var=output_5_1_3_clusterrole_with_output.stdout_lines
  when: output_5_1_3_clusterrole.stdout.find('*') != -1

- name: 5.1.4 Minimize access to create pods (Not Scored)
  debug: msg="Where possible, remove create access to pod objects in the cluster."

- shell: "kubectl get clusterroles -o=custom-columns=NAME:.metadata.name,RESOURCES:.rules[].resources,VERBS:.rules[].verbs | grep pods"
  register: output_5_1_4_clusterrole

- debug: msg="No clusterrole has an access to create pods"
  when: not(output_5_1_4_clusterrole.stdout.find('create') != -1)

- shell: "kubectl get clusterroles -o=custom-columns=NAME:.metadata.name,RESOURCES:.rules[].resources,VERBS:.rules[].verbs | grep pods | grep create"
  register: output_5_1_4_clusterrole_with_output
  when: output_5_1_4_clusterrole.stdout.find('create') != -1

- name: 5.1.4 Minimize access to create pods (Not Scored)
  debug: var=output_5_1_4_clusterrole_with_output.stdout_lines
  when: output_5_1_4_clusterrole.stdout.find('create') != -1

# - name: 5.1.5 Ensure that default service accounts are not actively used. (Scored)
#   shell: "kubectl patch serviceaccount default -p $'automountServiceAccountToken: false'"

- name: Copy service account yaml to directory
  copy:
    src: "../files/service-account.yaml"
    dest: "/etc/kubernetes/policies/service-account.yaml" 
    mode: 0644

- name: 5.1.5 Ensure that default service accounts are not actively used. (Scored)
  shell: "kubectl create -f /etc/kubernetes/policies/service-account.yaml"

- name: 5.1.6 Ensure that Service Account Tokens are only mounted where necessary (Not Scored)
  debug: msg="Modify the definition of pods and service accounts which do not need to mount service tokens to disable it. Pods mounted without service account tokens will not be able to communicate with the API server, except where the resource is available to unauthenticated principals."
- shell: "kubectl get sa --all-namespaces"

- name: Copy pod policies yaml to directory
  copy:
    src: "../files/pod-policies.yaml"
    dest: "/etc/kubernetes/policies/pod-policies.yaml" 
    mode: 0644

- name: |
         "5.2.1 Minimize the admission of privileged containers (Not Scored)"
         "5.2.2 Minimize the admission of containers wishing to share the host process ID namespace (Scored)"
         "5.2.3 Minimize the admission of containers wishing to share the host IPC namespace (Scored)"
         "5.2.4 Minimize the admission of containers wishing to share the host network namespace (Scored)"
         "5.2.5 Minimize the admission of containers with allowPrivilegeEscalation (Scored)"
         "5.2.6 Minimize the admission of root containers (Not Scored)"
         "5.2.7 Minimize the admission of containers with the NET_RAW capability (Not Scored)"
         "5.2.8 Minimize the admission of containers with added capabilities (Not Scored)"
         "5.2.9 Minimize the admission of containers with capabilities assigned (Not Scored)"
  shell: "kubectl create -f /etc/kubernetes/policies/pod-policies.yaml"

- name: Copy network policies yaml to directory
  copy:
    src: "../files/network-policies-yaml"
    dest: "/etc/kubernetes/policies/network-policies.yaml" 
    mode: 0644

- name: 5.3.2 Ensure that all Namespaces have Network Policies defined (Scored)
  shell: "kubectl create -f /etc/kubernetes/policies/network-policies.yaml"

- name: 5.4.1 Prefer using secrets as files over secrets as environment variables (Not Scored)
  debug: msg="If possible, rewrite application code to read secrets from mounted secret files, rather than from environment variables."

- name: 5.4.2 Consider external secret storage (Not Scored)
  debug: msg="Refer to the secrets management options offered by your cloud provider or a third-party secrets management solution."

- name: 5.5.1 Configure Image Provenance using ImagePolicyWebhook admission controller (Not Scored)
  debug: msg="Review the pod definitions in your cluster and verify that image provenance is configured as appropriate."

- name: 5.7.1 Create administrative boundaries between resources using namespaces (Not Scored)
  debug: msg="Ensure that these namespaces are the ones you need and are adequately administered as per your requirements."

- name: 5.7.2 Ensure that the seccomp profile is set to docker/default in your pod definitions (Not Scored)
  debug: msg="Enable docker/default seccomp profile in your pod definitions."
#    - --feature-gates=AllAlpha=true
#- --service-account-signing-key-file=/etc/kubernetes/pki/sa.key
#- --service-account-issuer=kubernetes.default.svc

- name: 5.7.3 Apply Security Context to Your Pods and Containers (Not Scored)
  debug: msg="Apply Security Context to Your Pods and Containers"

- name: 5.7.4 The default namespace should not be used (Scored)
  debug: msg="Ensure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace."