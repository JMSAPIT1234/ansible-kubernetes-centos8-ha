---
- name: Disable swap
  command: swapoff -a
  when: ansible_swaptotal_mb > 0
  tags: swap

- name: Disable swap permanently, persist reboots
  replace:
    path: /etc/fstab
    regexp: '^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$'
    replace: '#\1\2\3swap\4'
    backup: yes
  tags: swap

- name: install utils
  yum:
    name:
      - iproute-tc
      - bind-utils
    state: installed
  tags: install_utils

- name: Install Kubernetes Repository
  copy:
    src: kubernetes.repo
    dest: /etc/yum.repos.d/kubernetes.repo
    mode: 0644
  tags: add_kubernetes_repo

- name: Install Kubernetes packages
  yum:
    name:
      - kubelet
      - kubeadm
      - kubectl
    disable_excludes: kubernetes
    state: latest
  tags: install_kubernetes_packages

# Defining cgroup-driver
- name: Define sysconfig kubelet
  template:
    src: "sysconfig_kubelet.j2"
    dest: "/etc/sysconfig/kubelet"
    owner: root
    group: root
  tags: define_sysconfig_kubelet

- name: Enable kubelet systemctl
  service:
    name: kubelet
    state: stopped
    enabled: yes
  tags: start_kubelet
[root@GT-CRC-U165 ansible-kubernetes-centos8-ha]# cat roles/kubernetes/tasks/m
cat: roles/kubernetes/tasks/m: No such file or directory
[root@GT-CRC-U165 ansible-kubernetes-centos8-ha]# cat roles/kubernetes/tasks/ma
cat: roles/kubernetes/tasks/ma: No such file or directory
[root@GT-CRC-U165 ansible-kubernetes-centos8-ha]# cat roles/kubernetes/tasks/master.yaml
---
- name: Generate join control plane cert from first master
  shell: "kubeadm alpha certs certificate-key"
  register: kubeadm_join_control_plane_cert
  when: inventory_hostname in groups['kubernetes_master'][0]
  tags: kubeadm_join_control_plane_command

- set_fact:
    kubeadm_certificate_key: "{{ hostvars[groups['kubernetes_master'][0]].kubeadm_join_control_plane_cert.stdout_lines[-1] }}"

- name: Generate kubeadm config file
  template:
    src: "kubeadm_config.yaml.j2"
    dest: "/tmp/kubeadm_config.yaml"
  tags: generate_kubeadm_config

- name: Check if admin.conf exists
  stat:
    path: /etc/kubernetes/admin.conf
  when: inventory_hostname in groups['kubernetes_master']
  register: stat_k8s_result

- name: Start master node
  shell: "kubeadm init --config /tmp/kubeadm_config.yaml {% if control_plane_multi_master|bool %}--upload-certs{% endif %}"
  register: kubeadm_init
  when: inventory_hostname in groups['kubernetes_master'][0] and stat_k8s_result.stat.exists == False
  tags: init_kubernetes_master

- name: wait for 120 sec
  wait_for: timeout=120

- name: Generate master join command from master
  shell: "kubeadm token create --print-join-command --certificate-key {{ kubeadm_certificate_key }}"
  register: kubeadm_join_control_plane_command
  when: inventory_hostname in groups['kubernetes_master'][0]
  tags: kubeadm_join_control_plane_command


- name: Generate worker join command from master
  shell: "kubeadm token create --print-join-command"
  register: kubeadm_join_worker_command
  when: inventory_hostname in groups['kubernetes_master'][0]
  tags: init_kubernetes_master

- name: Get k8s version
  shell: "kubectl --kubeconfig /etc/kubernetes/admin.conf version | base64 -w 0"
  register: k8s_version
  when: inventory_hostname in groups['kubernetes_master'][0]
  tags: get_k8s_version

#https://raw.githubusercontent.com/jaganthoutam/ansible-kubernetes-centos8-ha/master/roles/kubernetes/files/kube-flannel.yml
- name: Install overlay network
  shell: "kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f https://raw.githubusercontent.com/jaganthoutam/ansible-kubernetes-centos8-ha/master/roles/kubernetes/files/kube-flannel.yml"
  when: inventory_hostname in groups['kubernetes_master'][0]
  tags: install_flannel_overlay_network

- name: Start secondary master nodes
  shell: "{{ hostvars[groups['kubernetes_master'][0]].kubeadm_join_control_plane_command.stdout_lines[-1] }}"
  when:
    - inventory_hostname in groups['kubernetes_master'][1:]
    - control_plane_multi_master|bool
    - stat_k8s_result.stat.exists == False
  tags: init_secondary_kubernetes_masters

- name: Create kubeconfig directory in root user directory
  file:
    path: "/root/.kube/"
    state: directory
    mode: 0755
  when: inventory_hostname in groups['kubernetes_master']
  tags: copy_kubeconfig

- name: Copy kubectl admin config file to root user directory
  copy:
    src: "/etc/kubernetes/admin.conf"
    dest: "/root/.kube/config"
    remote_src: true
  when: inventory_hostname in groups['kubernetes_master']
  tags: copy_kubeconfig

- name: Add kubectl autocompletion to bashrc for root user
  lineinfile:
    dest: "/root/.bashrc"
    line: "source <(kubectl completion bash)"
    state: present
  when: inventory_hostname in groups['kubernetes_master']
  tags: add_kubectl_completion

- name: mkdir for ingress
  file:
    path: /etc/kubernetes/ingress
    state: directory
  when: inventory_hostname in groups['kubernetes_master']

- name: Copy nginx-ingress.yaml to kubernetes folder
  copy:
    src: nginx-ingress.yaml
    dest: /etc/kubernetes/ingress/nginx-ingress.yaml
    mode: 0644
  when: inventory_hostname in groups['kubernetes_master']

- name: Install nginx-ingress network
  shell: "kubectl apply -f /etc/kubernetes/ingress/nginx-ingress.yaml"
  when: inventory_hostname in groups['kubernetes_master'][0]
  tags: install_ingress_overlay_network


- name: mkdir for default apps
  file:
    path: /etc/kubernetes/default
    state: directory
  when: inventory_hostname in groups['kubernetes_master']


- name: Copy hello-world.yaml to kubernetes folder
  copy:
    src: hello-world.yaml
    dest: /etc/kubernetes/default/hello-world.yaml
    mode: 0644
  when: inventory_hostname in groups['kubernetes_master']


- name: Copy ingress-usage.yaml to kubernetes folder
  copy:
    src: nginx-ingress.yaml
    dest: /etc/kubernetes/default/ingress-usage.yaml
    mode: 0644
  when: inventory_hostname in groups['kubernetes_master']

- name: Install nginx-ingress network
  shell: "kubectl apply -f /etc/kubernetes/default/"
  when: inventory_hostname in groups['kubernetes_master'][0]
  tags: install_demo_app_with_ingess

